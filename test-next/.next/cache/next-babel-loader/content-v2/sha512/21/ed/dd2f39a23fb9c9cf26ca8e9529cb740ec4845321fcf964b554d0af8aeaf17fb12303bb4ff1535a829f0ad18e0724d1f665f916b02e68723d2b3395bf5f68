{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// 8-51, 52\nimport { callApi } from '../src/api';\n\nPage2.getInitialProps = async ({\n  query\n}) => {\n  /**\n   * 브라우저에서 page2를 직접 접속하면 sayHello.js 모듈이 담긴 js 파일이 전송되지 않는다.\n   * getInitialProps 함수가 서버 측에서 실행되어 클라이언트로 별도의 파일을 내려 줄 필요가 없기 때문이다.\n   * page1에서 page2로 이동하는 버튼을 클릭하면 getInitialProps 함수가 클라이언트에서 실행된다.\n   */\n  const {\n    sayHello\n  } = await import('../src/sayHello');\n  console.log('dynamic import', sayHello());\n  const text = query.text || 'none';\n  const data = await callApi();\n  return {\n    text,\n    data\n  };\n};\n\nexport default function Page2({\n  text,\n  data\n}) {\n  //function onClick() {\n  // 동적 import 를 사용해서 sayHello 모듈을 가져온다.\n  //import('../src/sayHello').then(({sayHello}) => console.log(sayHello()));\n\n  /**\n   * 버튼을 클릭하는 순간 sayHelloj.js 모듈이 담긴 js 파일이 전송되는 것을 확인할 수 있다.(최초 한 번)\n   * .next/static/chunks 폴더 밑에 sayHello.js 모듈의 코드를 포함하는 번들 파일이 있다.\n   * .next/server 폴더 밑에 sayHello.js 모듈의 코드를 포함하는 번들 파일이 있다.\n   * \n   * 동적 import 를 사용하면 클라이언트뿐만 아니라 서버를 위한 번들 파일도 생성되는 것을 확인할 수 있다.\n   * .next/server 폴더 밑에 생성되는 파일은 서버사이드 렌더링 시 사용된다.\n   */\n  // }\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"p\", {\n      children: \"This is home page2\"\n    }), /*#__PURE__*/_jsx(\"p\", {\n      children: `text: ${text}`\n    }), /*#__PURE__*/_jsx(\"p\", {\n      children: `data is ${data}`\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}