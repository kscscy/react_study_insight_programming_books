{"ast":null,"code":"/**\n * next는 여러 페이지에서 공통으로 사용되는 모듈을 별도의 번들 파일로 분할한다.\n * 웹팩의 splitChunks 설정을 통해 코드를 분할하며\n * 코드 변경에 따른 캐시 무효화(cache invalidation)를 최소화하는 방향으로 설계돼 있다.\n * 우선 여러 페이지에서 공통으로 사용할 모듈을 만들어보자.\n */\nexport function add(a, b) {\n  console.log('call add');\n  return a + b;\n}","map":{"version":3,"sources":["/Users/devsc/Desktop/Study/ReactStudy/react-programming-books/test-next/src/util.js"],"names":["add","a","b","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAOH,CAAC,GAAGC,CAAX;AACD","sourcesContent":["/**\n * next는 여러 페이지에서 공통으로 사용되는 모듈을 별도의 번들 파일로 분할한다.\n * 웹팩의 splitChunks 설정을 통해 코드를 분할하며\n * 코드 변경에 따른 캐시 무효화(cache invalidation)를 최소화하는 방향으로 설계돼 있다.\n * 우선 여러 페이지에서 공통으로 사용할 모듈을 만들어보자.\n */\n\nexport function add(a, b) {\n  console.log('call add');\n  return a + b;\n}\n"]},"metadata":{},"sourceType":"module"}